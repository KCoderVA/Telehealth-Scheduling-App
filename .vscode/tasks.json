{
	"version": "2.0.0",
	"tasks": [
		{
			"label": "Initialize Git Repository",
			"type": "shell",
			"command": "git",
			"args": [
				"init"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Git Add All Changes",
			"type": "shell",
			"command": "git",
			"args": [
				"add",
				"."
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Git Commit with Message",
			"type": "shell",
			"command": "git",
			"args": [
				"commit",
				"-m",
				"${input:commitMessage}"
			],
			"group": "build",
			"dependsOn": "Git Add All Changes",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "Quick Commit and Push",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"git add . ; git commit -m '${input:quickCommitMessage}' ; Write-Host 'Commit completed successfully!'"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "üöÄ Open PowerApps Studio",
			"type": "shell",
			"command": "start",
			"args": [
				"https://make.powerapps.com/"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "silent",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "üìä Open SharePoint Admin",
			"type": "shell",
			"command": "start",
			"args": [
				"https://admin.microsoft.com/sharepoint"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "silent",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "‚ö° Open Power Automate",
			"type": "shell",
			"command": "start",
			"args": [
				"https://make.powerautomate.com/"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "silent",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "üîß Open Power Platform Admin Center",
			"type": "shell",
			"command": "start",
			"args": [
				"https://admin.powerplatform.microsoft.com/"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "silent",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "üåê Open All Power Platform Tools",
			"dependsOrder": "parallel",
			"dependsOn": [
				"üöÄ Open PowerApps Studio",
				"üìä Open SharePoint Admin",
				"‚ö° Open Power Automate",
				"üîß Open Power Platform Admin Center"
			],
			"group": "build"
		},
		{
			"label": "üì¶ Create Project Backup",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"if (!(Test-Path '.\\backups')) { New-Item -ItemType Directory -Path '.\\backups' -Force | Out-Null }; $timestamp = Get-Date -Format 'yyyy-MM-dd-HHmm'; $backupFile = \".\\backups\\TelehealthProject-$timestamp.zip\"; try { Compress-Archive -Path @('.\\src', '.\\docs', '.\\data', '.\\legacy', '.\\README.md', '.\\CHANGELOG.md', '.\\CONTRIBUTING.md', '.\\SECURITY.md', '.\\LICENSE', '.\\.github', '.\\.vscode\\tasks.json', '.\\Telehealth Resources Project.code-workspace') -DestinationPath $backupFile -Force; $size = [math]::Round((Get-Item $backupFile).Length / 1MB, 2); Write-Host '‚úÖ Backup created successfully!' -ForegroundColor Green; Write-Host \"   File: TelehealthProject-$timestamp.zip\" -ForegroundColor Cyan; Write-Host \"   Size: $size MB\" -ForegroundColor Cyan; Write-Host '   Location: .\\backups\\' -ForegroundColor Cyan } catch { Write-Error \"Backup failed: $_\" }"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "üßπ Clean Temp Files",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"$patterns = @('~$*', '*.tmp', '*.temp', '*.bak', '*.backup', '*_preview.html', '*_preview_*.html'); $removed = 0; foreach ($pattern in $patterns) { $files = Get-ChildItem -Path . -Recurse -Include $pattern -ErrorAction SilentlyContinue; foreach ($file in $files) { try { Remove-Item $file.FullName -Force; $removed++ } catch { Write-Warning \"Could not remove: $($file.Name)\" } } }; Write-Host \"‚úÖ Cleaned $removed temporary files!\" -ForegroundColor Green"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "üìÑ Update Project Documentation",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"$date = Get-Date -Format 'MMMM dd, yyyy'; try { if (Test-Path 'README.md') { (Get-Content 'README.md') -replace 'Last Updated: .*', \"Last Updated: $date\" | Set-Content 'README.md'; Write-Host '‚úÖ README.md updated with current date' -ForegroundColor Green } else { Write-Warning 'README.md not found' }; if (Test-Path 'CONTRIBUTING.md') { (Get-Content 'CONTRIBUTING.md') -replace 'Last Updated: .*', \"Last Updated: $date\" | Set-Content 'CONTRIBUTING.md'; Write-Host '‚úÖ CONTRIBUTING.md updated with current date' -ForegroundColor Green }; if (Test-Path 'SECURITY.md') { (Get-Content 'SECURITY.md') -replace 'Last Updated: .*', \"Last Updated: $date\" | Set-Content 'SECURITY.md'; Write-Host '‚úÖ SECURITY.md updated with current date' -ForegroundColor Green } } catch { Write-Error \"Documentation update failed: $_\" }"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "Export PowerApps Solutions",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'Opening PowerApps Studio for manual solution export...'; Write-Host 'Remember to:'; Write-Host '1. Export your canvas app as .msapp to /src/powerapps/'; Write-Host '2. Export Power Automate flows as JSON to /src/power-automate/'; Write-Host '3. Document any SharePoint list changes in /src/sharepoint/'; start https://make.powerapps.com/"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			}
		},
		{
			"label": "üìà Project Status Check",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host '=== üè• Telehealth Project Status ===' -ForegroundColor Green; Write-Host \"Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')\" -ForegroundColor Gray; Write-Host ''; if (Get-Command git -ErrorAction SilentlyContinue) { Write-Host 'üìä Git Repository Status:' -ForegroundColor Yellow; $branch = git branch --show-current; Write-Host \"   Branch: $branch\" -ForegroundColor Cyan; $status = git status --porcelain; if ($status) { Write-Host \"   Uncommitted changes: $($status.Count) files\" -ForegroundColor Red; $status | Select-Object -First 5 | ForEach-Object { Write-Host \"     $_\" -ForegroundColor Gray } } else { Write-Host '   Working directory clean ‚úÖ' -ForegroundColor Green }; Write-Host ''; Write-Host 'üìù Recent Commits:' -ForegroundColor Yellow; git log --oneline -5 | ForEach-Object { Write-Host \"   $_\" -ForegroundColor Gray } } else { Write-Host '‚ö†Ô∏è  Git not available' -ForegroundColor Red }; Write-Host ''; Write-Host 'üìÅ Project Structure:' -ForegroundColor Yellow; @('src', 'docs', 'data', 'legacy', '.github', '.vscode') | ForEach-Object { if (Test-Path $_) { $count = (Get-ChildItem $_ -Recurse -File).Count; Write-Host \"   $_/: $count files ‚úÖ\" -ForegroundColor Green } else { Write-Host \"   $_/: Missing ‚ùå\" -ForegroundColor Red } }; Write-Host ''"
			],
			"group": "test",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "üîç Validate Project Structure",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üîç Validating Project Structure...' -ForegroundColor Yellow; $errors = 0; $warnings = 0; $requiredFiles = @('README.md', 'CHANGELOG.md', 'LICENSE', 'CONTRIBUTING.md', 'SECURITY.md'); $requiredDirs = @('src', 'docs', 'data', 'legacy', '.github', '.vscode'); Write-Host ''; Write-Host 'üìÑ Required Files:' -ForegroundColor Cyan; foreach ($file in $requiredFiles) { if (Test-Path $file) { Write-Host \"   ‚úÖ $file\" -ForegroundColor Green } else { Write-Host \"   ‚ùå $file (missing)\" -ForegroundColor Red; $errors++ } }; Write-Host ''; Write-Host 'üìÅ Required Directories:' -ForegroundColor Cyan; foreach ($dir in $requiredDirs) { if (Test-Path $dir) { $count = (Get-ChildItem $dir -Recurse -File -ErrorAction SilentlyContinue).Count; Write-Host \"   ‚úÖ $dir/ ($count files)\" -ForegroundColor Green } else { Write-Host \"   ‚ùå $dir/ (missing)\" -ForegroundColor Red; $errors++ } }; Write-Host ''; if ($errors -eq 0) { Write-Host '‚úÖ Project structure validation passed!' -ForegroundColor Green } else { Write-Host \"‚ùå Project structure validation failed: $errors errors, $warnings warnings\" -ForegroundColor Red }"
			],
			"group": "test",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "üìã Generate Project Report",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"$reportFile = \"Project-Report-$(Get-Date -Format 'yyyy-MM-dd-HHmm').md\"; Write-Host \"üìã Generating project report: $reportFile\" -ForegroundColor Yellow; $content = @(); $content += '# Telehealth Project Report'; $content += \"Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')\"; $content += ''; $content += '## Project Structure'; if (Test-Path 'src') { $srcCount = (Get-ChildItem 'src' -Recurse -File).Count; $content += \"- src/: $srcCount files\" }; if (Test-Path 'docs') { $docCount = (Get-ChildItem 'docs' -File -Filter '*.md').Count; $content += \"- docs/: $docCount documentation files\" }; if (Test-Path 'data') { $dataCount = (Get-ChildItem 'data' -File).Count; $dataSize = [math]::Round(((Get-ChildItem 'data' -File | Measure-Object -Property Length -Sum).Sum / 1MB), 2); $content += \"- data/: $dataCount files ($dataSize MB)\" }; if (Get-Command git -ErrorAction SilentlyContinue) { $content += ''; $content += '## Git Status'; $branch = git branch --show-current; $content += \"- Current branch: $branch\"; $commits = git rev-list --count HEAD; $content += \"- Total commits: $commits\"; $lastCommit = git log -1 --format='%h - %s (%cr)'; $content += \"- Last commit: $lastCommit\" }; $content += ''; $content += '---'; $content += '*Report generated by VS Code task*'; $content | Out-File $reportFile -Encoding UTF8; Write-Host \"‚úÖ Report generated: $reportFile\" -ForegroundColor Green"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "üßπ Pre-Commit Cleanup & Validation",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-ExecutionPolicy",
				"Bypass",
				"-File",
				".\\scripts\\Pre-Commit-Cleanup.ps1"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "ÔøΩ Push to GitHub Repository",
			"type": "shell",
			"command": "powershell",
			"args": [
				"-Command",
				"Write-Host 'üì§ Preparing to push to GitHub...' -ForegroundColor Yellow; if (!(git remote)) { Write-Host 'Adding GitHub remote...' -ForegroundColor Cyan; git remote add origin https://github.com/KCoderVA/Telehealth-Scheduling-App.git } else { Write-Host 'Remote already configured' -ForegroundColor Green }; Write-Host 'Pushing to GitHub...' -ForegroundColor Cyan; git push -u origin master; if ($LASTEXITCODE -eq 0) { Write-Host '‚úÖ Successfully pushed to GitHub!' -ForegroundColor Green; Write-Host 'Repository URL: https://github.com/KCoderVA/Telehealth-Scheduling-App' -ForegroundColor Cyan } else { Write-Host '‚ùå Push failed. Check your GitHub credentials and network connection.' -ForegroundColor Red }"
			],
			"group": "build",
			"presentation": {
				"echo": true,
				"reveal": "always",
				"focus": false,
				"panel": "shared"
			},
			"problemMatcher": []
		},
		{
			"label": "üîÑ Full GitHub Workflow",
			"dependsOrder": "sequence",
			"dependsOn": [
				"üßπ Pre-Commit Cleanup & Validation",
				"Git Add All Changes",
				"Git Commit with Message",
				"üì§ Push to GitHub Repository"
			],
			"group": "build"
		},
		{
			"label": "üöÄ Daily Workflow Start",
			"dependsOrder": "sequence",
			"dependsOn": [
				"üìà Project Status Check",
				"üßπ Clean Temp Files",
				"üåê Open All Power Platform Tools"
			],
			"group": "build"
		}
	],
	"inputs": [
		{
			"id": "commitMessage",
			"description": "Enter detailed commit message",
			"default": "Update project files",
			"type": "promptString"
		},
		{
			"id": "quickCommitMessage",
			"description": "Enter quick commit message",
			"default": "Quick save progress",
			"type": "promptString"
		}
	]
}
